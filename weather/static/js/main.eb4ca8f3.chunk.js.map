{"version":3,"sources":["components/Header.js","components/WeatherCard.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","WeatherCard","temprature","city","sunrise","sunset","humidity","icon","weatherIcons","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","Card","Content","Feed","Event","moment","format","Math","floor","Date","toLocaleTimeString","Forecast","forcast","style","marginTop","Group","itemsPerRow","map","data","unix","dt","round","temp","max","min","Meta","Description","weather","description","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemprature","setHumidity","setSunrise","setSunset","setIcon","setForecast","loading","setloading","useEffect","navigator","geolocation","getCurrentPosition","position","coords","axios","get","then","weatherData","current","timezone","main","daily","Loader","active","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb4ca8f3.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div className=\"app-header\">\n            React Weather Application\n        </div>\n    )\n}\n","import React from 'react'\nimport { Card, Feed } from 'semantic-ui-react'\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\n\nexport default function WeatherCard(\n  { temprature, city, sunrise, sunset, humidity, icon }) {\n  let weatherIcons = null;\n\n  if (icon === 'Haze') {\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Thunderstorm') {\n    weatherIcons = <FontAwesomeIcon icon={faBolt} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Drizzle') {\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Rain') {\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Snow') {\n    weatherIcons = <FontAwesomeIcon icon={faSnowman} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Mist') {\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Clear') {\n    weatherIcons = <FontAwesomeIcon icon={faSun} size=\"lg\" color=\"#212121\" />\n  }\n  else if (icon === 'Clouds') {\n    weatherIcons = <FontAwesomeIcon icon={faCloud} size=\"lg\" color=\"#212121\" />\n  }\n  return (\n    <Card className=\"weather-card-main\">\n      <Card.Content className=\"weather-card\">\n        <Card.Header className=\"weather-card-child\">{city}</Card.Header>\n        <div className=\"icon-container\">\n          {weatherIcons}\n        </div>\n      </Card.Content>\n      <Card.Content>\n        <Feed>\n          <Feed.Event>\n            <Feed.Content>\n              <h5 className=\"weather-card-child\">\n                {moment().format('MMMM Do, h:mm a')}\n              </h5>\n              <div className=\"weather-card\">\n                <div className=\"weather-card-child\">\n                  <b>Temprature</b>: {Math.floor(temprature)} ℃\n                </div>\n                <div className=\"weather-card-child\">\n                  <b>Humidity</b>: {humidity} %\n                </div>\n              </div>\n\n              <div className=\"weather-card\">\n                <div className=\"weather-card-child\">\n                  <b>Sunrise</b>: {new Date(sunrise * 1000).toLocaleTimeString('en-IN')}\n                </div>\n                <div className=\"weather-card-child\">\n                  <b>Sunset</b>: {new Date(sunset * 1000).toLocaleTimeString('en-IN')}\n                </div>\n              </div>\n\n            </Feed.Content>\n          </Feed.Event>\n        </Feed>\n      </Card.Content>\n    </Card>\n  )\n}\n","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport moment from 'moment';\n\nexport default function Forecast({ forcast }) {\n    return (\n        <div style={{ marginTop: 20 }}>\n            <div className=\"forecast-main-header\">\n                8 Day Forecast\n            </div>\n            <Card.Group itemsPerRow={4}>\n                {forcast.map((data) => {\n                    return (\n                        <Card className=\"forecast-card\">\n                            <Card.Content>\n                                <Card.Header className=\"forecast-date\">\n                                    Date: {moment.unix(data.dt).format('LL')}\n                                </Card.Header>\n                                <Card.Header className=\"forecast-header\">\n                                    Temprature: {Math.round((data.temp.max + data.temp.min) / 2)} ℃\n                                </Card.Header>\n                                <Card.Meta className=\"forecast-header\">\n                                    Humidity: {data.humidity} %\n                                </Card.Meta>\n                                <Card.Description className=\"temp-desc\">\n                                    Description: {data.weather[0].description}\n                                </Card.Description>\n                            </Card.Content>\n                        </Card>\n                    )\n                })}\n            </Card.Group>\n        </div>\n    )\n}\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport Forecast from './components/Forecast';\nimport { Loader } from 'semantic-ui-react';\n\nconst URL = `https://api.openweathermap.org/data/2.5/onecall`\nconst API_KEY = `39634d23dcc6f3bcdd1ffe1188c26d9f`\n\nfunction App() {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [city, setCity] = useState('');\n  const [temprature, setTemprature] = useState(null);\n  const [humidity, setHumidity] = useState(null);\n  const [sunrise, setSunrise] = useState(null);\n  const [sunset, setSunset] = useState(null);\n  const [icon, setIcon] = useState('');\n  const [forcast, setForecast] = useState([]);\n  const [loading, setloading] = useState(true);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n\n    axios.get(`${URL}?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&appid=${API_KEY}&units=metric`)\n      .then((weatherData) => {\n        setloading(false)\n        setTemprature(weatherData.data.current.temp);\n        setSunset(weatherData.data.current.sunset)\n        setSunrise(weatherData.data.current.sunrise)\n        setHumidity(weatherData.data.current.humidity)\n        setCity(weatherData.data.timezone)\n        setIcon(weatherData.data.current.weather[0].main)\n        setForecast(weatherData.data.daily)\n      })\n\n  }, [latitude, longitude])\n\n  return (\n    <div className=\"main\">\n      <Header />\n      {loading ? (\n        <div>\n          <p>Loading..Please Wait</p>\n          <Loader active inline='centered' />\n        </div>\n      ) : (\n        <WeatherCard\n          temprature={temprature}\n          humidity={humidity}\n          sunrise={sunrise}\n          sunset={sunset}\n          city={city}\n          icon={icon}\n        />\n      )}\n      <Forecast forcast={forcast} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}